// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeuroEase.Core.Data;

#nullable disable

namespace NeuroEase.Core.Migrations
{
    [DbContext(typeof(NeuroEaseDbContext))]
    [Migration("20250805085846_initDatabase")]
    partial class initDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Model.Layer.Entity.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosticRuleId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("Core.Model.Layer.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 1,
                            Section = "Episode of Major Depression",
                            Text = "در دو هفته‌ی گذشته، آیا بیشتر از معمول احساس غمگینی یا بی‌انگیزگی داشته‌اید؟"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 2,
                            Section = "Episode of Major Depression",
                            Text = "آیا در این مدت از کارهایی که قبلاً برایتان لذت‌بخش بود کمتر لذت برده‌اید؟"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 3,
                            Section = "Episode of Major Depression",
                            Text = "آیا در اشتها یا وزن‌تان تغییری حس کرده‌اید؟"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 4,
                            Section = "Episode of Major Depression",
                            Text = "آیا با مشکلاتی در خواب (مثل کم‌خوابی یا خواب زیاد) مواجه شده‌اید؟"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 5,
                            Section = "Episode of Major Depression",
                            Text = "آیا خسته یا بی‌انرژی بوده‌اید؟"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 6,
                            Section = "Episode of Major Depression",
                            Text = "آیا احساس بی‌ارزشی یا گناه داشته‌اید؟"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 7,
                            Section = "Episode of Major Depression",
                            Text = "آیا تمرکز یا تصمیم‌گیری برایتان سخت شده؟"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 8,
                            Section = "Episode of Major Depression",
                            Text = "آیا به مرگ یا نبودن فکر کرده‌اید؟"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 9,
                            Section = "Episode of Hypomania",
                            Text = "آیا دوره‌ای بوده که احساس نشاط یا اعتماد به‌نفس بیش از حد داشته‌اید؟"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 10,
                            Section = "Episode of Hypomania",
                            Text = "آیا در آن زمان نیازتان به خواب کمتر از معمول شده بود؟"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 11,
                            Section = "Episode of Hypomania",
                            Text = "آیا خیلی بیشتر یا سریع‌تر از حد معمول صحبت می‌کردید؟"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 12,
                            Section = "Episode of Hypomania",
                            Text = "آیا ذهنتان مداوماً در حال پرش از یک فکر به فکر دیگر بود؟"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 13,
                            Section = "Episode of Hypomania",
                            Text = "آیا تمرکزتان به آسانی از بین می‌رفت؟"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 14,
                            Section = "Episode of Hypomania",
                            Text = "آیا احساس می‌کردید بیش‌فعال، اجتماعی یا اهل ریسک شده‌اید؟"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 15,
                            Section = "Episode of Mania",
                            Text = "آیا تا به حال دچار خلق‌وخوی بسیار بالا یا بی‌ثبات شده‌اید که کنترل آن برایتان دشوار باشد؟"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 16,
                            Section = "Episode of Mania",
                            Text = "آیا در آن زمان رفتارهایی داشته‌اید که برای کار یا روابطتان مشکل‌ساز شده باشد؟"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 17,
                            Section = "Panic Disorder",
                            Text = "آیا تجربه‌ی ناگهانی اضطراب شدید با علائمی مانند تپش قلب یا تنگی نفس داشته‌اید؟"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 18,
                            Section = "Panic Disorder",
                            Text = "آیا از اینکه چنین حملاتی دوباره رخ دهند، نگران بوده‌اید؟"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 19,
                            Section = "Agoraphobia",
                            Text = "آیا جاهایی وجود دارند که از رفتن به آن‌ها اجتناب می‌کنید چون فکر می‌کنید در صورت بروز مشکل نتوانید کمک بگیرید یا خارج شوید؟"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 20,
                            Section = "Social Phobia",
                            Text = "آیا از اینکه دیگران درباره‌تان قضاوت کنند (مثلاً هنگام صحبت کردن یا خوردن در جمع) احساس اضطراب می‌کنید؟"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 21,
                            Section = "Social Phobia",
                            Text = "آیا به‌خاطر این نگرانی، از چنین موقعیت‌هایی دوری کرده‌اید؟"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 22,
                            Section = "Obsessive-Compulsive Disorder (OCD)",
                            Text = "آیا افکار مزاحم و غیرارادی دارید که بارها در ذهنتان تکرار می‌شوند؟"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 23,
                            Section = "Obsessive-Compulsive Disorder (OCD)",
                            Text = "آیا برای کاهش این افکار، مجبور به انجام کارهایی مثل شست‌وشو یا چک کردن درب‌ها می‌شوید؟"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 24,
                            Section = "Post-Traumatic Stress Disorder (PTSD)",
                            Text = "آیا رویداد بسیار دردناک یا ترسناکی را تجربه کرده‌اید؟"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 25,
                            Section = "Post-Traumatic Stress Disorder (PTSD)",
                            Text = "آیا خاطرات آن رویداد بی‌اختیار به ذهن‌تان بازمی‌گردد؟"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 26,
                            Section = "Post-Traumatic Stress Disorder (PTSD)",
                            Text = "آیا سعی کرده‌اید از یادآورهای آن رویداد دوری کنید؟"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Order = 27,
                            Section = "Post-Traumatic Stress Disorder (PTSD)",
                            Text = "آیا اغلب در حالت اضطراب یا آماده‌باش دائمی هستید؟"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeuroEase.Core.Data.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionId = 1,
                            Response = true,
                            SessionId = "SeedSession1",
                            Text = "بله"
                        },
                        new
                        {
                            Id = 2,
                            QuestionId = 1,
                            Response = false,
                            SessionId = "SeedSession1",
                            Text = "خیر"
                        });
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.DiagnosticRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumMatchesRequired")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DiagnosticRule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "DEP001",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "بر اساس پاسخ به سوالات مربوط به معیارهای افسردگی (حداقل 5 علامت شامل غمگینی یا بی‌علاقگی).",
                            MinimumMatchesRequired = 5,
                            Title = "اختلال افسردگی عمده"
                        },
                        new
                        {
                            Id = 2,
                            Code = "HYP001",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "بر اساس پاسخ به سوالات مربوط به معیارهای هیپومانیا (حداقل 3 علامت).",
                            MinimumMatchesRequired = 3,
                            Title = "هیپومانیا"
                        },
                        new
                        {
                            Id = 3,
                            Code = "MAN001",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "بر اساس پاسخ به سوالات مربوط به معیارهای مانیا (خلق بالا و رفتار مشکل‌ساز).",
                            MinimumMatchesRequired = 2,
                            Title = "مانیا"
                        },
                        new
                        {
                            Id = 4,
                            Code = "PAN001",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "بر اساس پاسخ به سوالات مربوط به حملات پانیک و نگرانی از تکرار آن‌ها.",
                            MinimumMatchesRequired = 2,
                            Title = "اختلال پانیک"
                        });
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.RuleCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiagnosticRuleId")
                        .HasColumnType("int");

                    b.Property<string>("ExpectedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticRuleId");

                    b.ToTable("RuleCondition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiagnosticRuleId = 1,
                            ExpectedAnswer = "بله",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            DiagnosticRuleId = 1,
                            ExpectedAnswer = "بله",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 3,
                            DiagnosticRuleId = 1,
                            ExpectedAnswer = "بله",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 4,
                            DiagnosticRuleId = 1,
                            ExpectedAnswer = "بله",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 5,
                            DiagnosticRuleId = 1,
                            ExpectedAnswer = "بله",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 6,
                            DiagnosticRuleId = 2,
                            ExpectedAnswer = "بله",
                            QuestionId = 9
                        },
                        new
                        {
                            Id = 7,
                            DiagnosticRuleId = 2,
                            ExpectedAnswer = "بله",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 8,
                            DiagnosticRuleId = 2,
                            ExpectedAnswer = "بله",
                            QuestionId = 11
                        },
                        new
                        {
                            Id = 9,
                            DiagnosticRuleId = 3,
                            ExpectedAnswer = "بله",
                            QuestionId = 15
                        },
                        new
                        {
                            Id = 10,
                            DiagnosticRuleId = 3,
                            ExpectedAnswer = "بله",
                            QuestionId = 16
                        },
                        new
                        {
                            Id = 11,
                            DiagnosticRuleId = 4,
                            ExpectedAnswer = "بله",
                            QuestionId = 17
                        },
                        new
                        {
                            Id = 12,
                            DiagnosticRuleId = 4,
                            ExpectedAnswer = "بله",
                            QuestionId = 18
                        });
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeuroEase.Core.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeuroEase.Core.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeuroEase.Core.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeuroEase.Core.Model.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeuroEase.Core.Data.Answer", b =>
                {
                    b.HasOne("Core.Model.Layer.Entity.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.RuleCondition", b =>
                {
                    b.HasOne("NeuroEase.Core.Model.Entity.DiagnosticRule", "DiagnosticRule")
                        .WithMany("Conditions")
                        .HasForeignKey("DiagnosticRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiagnosticRule");
                });

            modelBuilder.Entity("NeuroEase.Core.Model.Entity.DiagnosticRule", b =>
                {
                    b.Navigation("Conditions");
                });
#pragma warning restore 612, 618
        }
    }
}
